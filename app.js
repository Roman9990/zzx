// ===== –§–£–¢–£–†–ò–°–¢–ò–ß–ï–°–ö–ò–ô ADMIN SELECTOR =====
// –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º

class FuturisticAdminPanel {
  constructor() {
    this.selectedAdmin = null;
    this.currentTab = 'available';
    this.searchTerm = '';
    this.filteredAdmins = [];
    this.animationQueue = [];
    this.isLoading = true;
    this.magneticElements = [];

    // –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞)
    this.appData = {
      "admins": [
        {
          "id": "123456789",
          "tag": "–º—É–∫—Ä–∞_–∞–¥—Å–∫–∞—è",
          "role": "–í–ª–∞–¥–µ–ª–∏—Ü–∞",
          "rating": 4.8,
          "status": "online",
          "avatar": "https://images.unsplash.com/photo-1494790108755-2616b612b786?w=150&h=150&fit=crop&crop=face",
          "dialogs_count": 15,
          "response_time": "2 –º–∏–Ω",
          "specialization": "–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã"
        },
        {
          "id": "987654321", 
          "tag": "support_master",
          "role": "–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞",
          "rating": 4.5,
          "status": "busy", 
          "avatar": "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150&h=150&fit=crop&crop=face",
          "dialogs_count": 23,
          "response_time": "5 –º–∏–Ω",
          "specialization": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã"
        },
        {
          "id": "555666777",
          "tag": "moderator_pro", 
          "role": "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä",
          "rating": 4.9,
          "status": "online",
          "avatar": "https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=150&h=150&fit=crop&crop=face", 
          "dialogs_count": 8,
          "response_time": "1 –º–∏–Ω",
          "specialization": "–ú–æ–¥–µ—Ä–∞—Ü–∏—è"
        },
        {
          "id": "444555666",
          "tag": "helper_girl",
          "role": "–ü–æ–º–æ—â–Ω–∏–∫",
          "rating": 4.7,
          "status": "busy",
          "avatar": "https://images.unsplash.com/photo-1534528741775-53994a69daeb?w=150&h=150&fit=crop&crop=face",
          "dialogs_count": 19,
          "response_time": "3 –º–∏–Ω", 
          "specialization": "–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
        },
        {
          "id": "777888999",
          "tag": "expert_advisor",
          "role": "–≠–∫—Å–ø–µ—Ä—Ç",
          "rating": 5.0,
          "status": "online", 
          "avatar": "https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=150&h=150&fit=crop&crop=face",
          "dialogs_count": 30,
          "response_time": "1 –º–∏–Ω",
          "specialization": "–°–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã"
        }
      ],
      "unavailable_admins": [
        {
          "id": "111222333",
          "tag": "admin_cool", 
          "reason": "–û—Ñ—Ñ–ª–∞–π–Ω",
          "last_seen": "2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥",
          "avatar": "https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face"
        },
        {
          "id": "999000111",
          "tag": "night_admin",
          "reason": "–í –æ—Ç–ø—É—Å–∫–µ",
          "last_seen": "3 –¥–Ω—è –Ω–∞–∑–∞–¥", 
          "avatar": "https://images.unsplash.com/photo-1519085360753-af0119f7cbe7?w=150&h=150&fit=crop&crop=face"
        }
      ]
    };

    this.init();
  }

  // ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
  async init() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–æ–≤...');

    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫—É DOM
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => this.setupApp());
    } else {
      this.setupApp();
    }
  }

  async setupApp() {
    try {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –Ω–∞ 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞
      setTimeout(() => {
        this.hideLoadingScreen();
      }, 3000);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      await this.loadData();

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      this.setupEventListeners();

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
      this.setupInterface();

      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏
      this.startAnimations();

      console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ');

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    }
  }

  // ===== –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• =====
  async loadData() {
    try {
      // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API –∑–∞–ø—Ä–æ—Å
      // const response = await fetch('./data/admins.json');
      // this.appData = await response.json();

      console.log('üìä –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', this.appData);
      this.filterAdmins();

    } catch (error) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
    }
  }

  // ===== –°–ö–†–´–¢–ò–ï –≠–ö–†–ê–ù–ê –ó–ê–ì–†–£–ó–ö–ò =====
  hideLoadingScreen() {
    const loadingScreen = document.getElementById('loadingScreen');
    const mainApp = document.getElementById('mainApp');

    if (loadingScreen && mainApp) {
      loadingScreen.style.animation = 'fadeOut 1s ease forwards';

      setTimeout(() => {
        loadingScreen.style.display = 'none';
        mainApp.style.display = 'block';
        mainApp.style.animation = 'fadeIn 1s ease forwards';
        this.isLoading = false;
      }, 1000);
    }
  }

  // ===== –ù–ê–°–¢–†–û–ô–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –°–û–ë–´–¢–ò–ô =====
  setupEventListeners() {
    // –ü–æ–∏—Å–∫
    const searchInput = document.getElementById('searchInput');
    if (searchInput) {
      searchInput.addEventListener('input', (e) => this.handleSearch(e.target.value));
      searchInput.addEventListener('focus', () => this.addSearchFocus());
      searchInput.addEventListener('blur', () => this.removeSearchFocus());
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞–±–æ–≤
    document.querySelectorAll('.tab-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        const tab = e.currentTarget.getAttribute('data-tab');
        this.switchTab(tab);
      });
    });

    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = document.getElementById('confirmModal');
    const closeModal = document.getElementById('closeModal');
    const cancelBtn = document.getElementById('cancelBtn');
    const confirmBtn = document.getElementById('confirmBtn');

    if (closeModal) closeModal.addEventListener('click', () => this.closeModal());
    if (cancelBtn) cancelBtn.addEventListener('click', () => this.closeModal());
    if (confirmBtn) confirmBtn.addEventListener('click', () => this.confirmSelection());

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –Ω–∞ backdrop
    if (modal) {
      modal.addEventListener('click', (e) => {
        if (e.target === modal || e.target.classList.contains('modal-backdrop')) {
          this.closeModal();
        }
      });
    }

    // –ö–ª–∞–≤–∏—à–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    document.addEventListener('keydown', (e) => this.handleKeyPress(e));

    // Magnetic —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
    this.setupMagneticEffects();
  }

  // ===== –ù–ê–°–¢–†–û–ô–ö–ê –ò–ù–¢–ï–†–§–ï–ô–°–ê =====
  setupInterface() {
    this.renderAdmins();
    this.updateBadges();
    this.setupParallax();
  }

  // ===== –û–ë–†–ê–ë–û–¢–ö–ê –ü–û–ò–°–ö–ê =====
  handleSearch(query) {
    this.searchTerm = query.toLowerCase();
    this.filterAdmins();
    this.renderAdmins();

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞
    this.animateSearch();
  }

  animateSearch() {
    const searchIcon = document.querySelector('.search-icon');
    if (searchIcon) {
      searchIcon.style.animation = 'none';
      setTimeout(() => {
        searchIcon.style.animation = 'breathe 2s infinite';
      }, 10);
    }
  }

  addSearchFocus() {
    const searchContainer = document.querySelector('.search-container');
    if (searchContainer) {
      searchContainer.classList.add('focused');
    }
  }

  removeSearchFocus() {
    const searchContainer = document.querySelector('.search-container');
    if (searchContainer) {
      searchContainer.classList.remove('focused');
    }
  }

  // ===== –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ê–î–ú–ò–ù–û–í =====
  filterAdmins() {
    if (!this.searchTerm) {
      this.filteredAdmins = [...this.appData.admins];
    } else {
      this.filteredAdmins = this.appData.admins.filter(admin =>
        admin.tag.toLowerCase().includes(this.searchTerm) ||
        admin.role.toLowerCase().includes(this.searchTerm) ||
        admin.specialization.toLowerCase().includes(this.searchTerm)
      );
    }
  }

  // ===== –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –¢–ê–ë–û–í =====
  switchTab(tabName) {
    if (this.currentTab === tabName) return;

    this.currentTab = tabName;

    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
    document.querySelectorAll('.tab-btn').forEach(btn => {
      btn.classList.remove('active');
      if (btn.getAttribute('data-tab') === tabName) {
        btn.classList.add('active');
      }
    });

    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    document.querySelectorAll('.tab-content').forEach(content => {
      content.classList.remove('active');
    });

    setTimeout(() => {
      const activeContent = document.getElementById(tabName + 'Tab');
      if (activeContent) {
        activeContent.classList.add('active');
        this.renderAdmins();
      }
    }, 150);

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
    this.animateTabSwitch();
  }

  animateTabSwitch() {
    const activeTab = document.querySelector('.tab-btn.active');
    if (activeTab) {
      activeTab.style.transform = 'translateY(-2px) scale(1.05)';
      setTimeout(() => {
        activeTab.style.transform = '';
      }, 200);
    }
  }

  // ===== –û–¢–†–ò–°–û–í–ö–ê –ê–î–ú–ò–ù–û–í =====
  renderAdmins() {
    if (this.currentTab === 'available') {
      this.renderAvailableAdmins();
    } else if (this.currentTab === 'unavailable') {
      this.renderUnavailableAdmins();
    }
  }

  renderAvailableAdmins() {
    const grid = document.getElementById('availableGrid');
    if (!grid) return;

    const adminsToShow = this.filteredAdmins;

    if (adminsToShow.length === 0) {
      grid.innerHTML = `
        <div class="no-results">
          <div class="no-results-icon">
            <i class="fas fa-search"></i>
          </div>
          <h3>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h3>
          <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞</p>
        </div>
      `;
      return;
    }

    grid.innerHTML = adminsToShow.map((admin, index) => 
      this.createAdminCard(admin, index)
    ).join('');

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
    this.addCardEventListeners();
  }

  renderUnavailableAdmins() {
    const grid = document.getElementById('unavailableGrid');
    if (!grid) return;

    const unavailableAdmins = this.appData.unavailable_admins || [];

    if (unavailableAdmins.length === 0) {
      grid.innerHTML = `
        <div class="no-results">
          <div class="no-results-icon">
            <i class="fas fa-smile"></i>
          </div>
          <h3>–í—Å–µ –∞–¥–º–∏–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã!</h3>
          <p>–û—Ç–ª–∏—á–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å - –≤—Å–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å</p>
        </div>
      `;
      return;
    }

    grid.innerHTML = unavailableAdmins.map((admin, index) => 
      this.createUnavailableCard(admin, index)
    ).join('');
  }

  // ===== –°–û–ó–î–ê–ù–ò–ï –ö–ê–†–¢–û–ß–ö–ò –ê–î–ú–ò–ù–ê =====
  createAdminCard(admin, index) {
    const statusClass = this.getStatusClass(admin.status);
    const statusText = this.getStatusText(admin.status);
    const stars = this.generateStars(admin.rating);

    return `
      <div class="admin-card" data-admin-id="${admin.id}" style="animation-delay: ${index * 0.1}s">
        <div class="admin-header">
          <div class="admin-avatar">
            <img src="${admin.avatar}" alt="${admin.tag}" loading="lazy">
          </div>
          <div class="admin-info">
            <h3>@${admin.tag}</h3>
            <div class="admin-role">${admin.role}</div>
          </div>
        </div>

        <div class="admin-details">
          <div class="admin-stat">
            <div class="stat-value">${admin.dialogs_count}</div>
            <div class="stat-label">–î–∏–∞–ª–æ–≥–æ–≤</div>
          </div>
          <div class="admin-stat">
            <div class="stat-value">${admin.response_time}</div>
            <div class="stat-label">–û—Ç–≤–µ—Ç</div>
          </div>
        </div>

        <div class="admin-rating">
          <div class="stars">${stars}</div>
          <span class="rating-value">${admin.rating}</span>
        </div>

        <div class="admin-status ${statusClass}">
          <div class="status-indicator"></div>
          <span>${statusText}</span>
        </div>

        <div class="admin-specialization">
          ${admin.specialization}
        </div>
      </div>
    `;
  }

  // ===== –°–û–ó–î–ê–ù–ò–ï –ö–ê–†–¢–û–ß–ö–ò –ù–ï–î–û–°–¢–£–ü–ù–û–ì–û –ê–î–ú–ò–ù–ê =====
  createUnavailableCard(admin, index) {
    return `
      <div class="admin-card unavailable-card" style="animation-delay: ${index * 0.1}s">
        <div class="admin-header">
          <div class="admin-avatar">
            <img src="${admin.avatar}" alt="${admin.tag}" loading="lazy">
          </div>
          <div class="admin-info">
            <h3>@${admin.tag}</h3>
            <div class="unavailable-reason">${admin.reason}</div>
          </div>
        </div>

        <div class="last-seen">
          –ë—ã–ª –≤ —Å–µ—Ç–∏: ${admin.last_seen}
        </div>
      </div>
    `;
  }

  // ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
  getStatusClass(status) {
    const statusMap = {
      'online': 'status-online',
      'busy': 'status-busy', 
      'offline': 'status-offline'
    };
    return statusMap[status] || 'status-offline';
  }

  getStatusText(status) {
    const textMap = {
      'online': '–û–Ω–ª–∞–π–Ω',
      'busy': '–ó–∞–Ω—è—Ç',
      'offline': '–û—Ñ—Ñ–ª–∞–π–Ω'
    };
    return textMap[status] || '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
  }

  generateStars(rating) {
    const fullStars = Math.floor(rating);
    const hasHalfStar = rating % 1 !== 0;
    let stars = '';

    // –ü–æ–ª–Ω—ã–µ –∑–≤–µ–∑–¥—ã
    for (let i = 0; i < fullStars; i++) {
      stars += '<i class="fas fa-star star"></i>';
    }

    // –ü–æ–ª–æ–≤–∏–Ω–∞ –∑–≤–µ–∑–¥—ã
    if (hasHalfStar) {
      stars += '<i class="fas fa-star-half-alt star"></i>';
    }

    // –ü—É—Å—Ç—ã–µ –∑–≤–µ–∑–¥—ã
    const emptyStars = 5 - Math.ceil(rating);
    for (let i = 0; i < emptyStars; i++) {
      stars += '<i class="far fa-star star"></i>';
    }

    return stars;
  }

  // ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ê–†–¢–û–ß–ï–ö =====
  addCardEventListeners() {
    document.querySelectorAll('.admin-card:not(.unavailable-card)').forEach(card => {
      card.addEventListener('click', () => {
        const adminId = card.getAttribute('data-admin-id');
        this.selectAdmin(adminId);
      });

      // Magnetic —ç—Ñ—Ñ–µ–∫—Ç
      this.addMagneticEffect(card);

      // Ripple —ç—Ñ—Ñ–µ–∫—Ç
      this.addRippleEffect(card);
    });
  }

  // ===== MAGNETIC –≠–§–§–ï–ö–¢ =====
  addMagneticEffect(element) {
    element.addEventListener('mousemove', (e) => {
      const rect = element.getBoundingClientRect();
      const x = e.clientX - rect.left - rect.width / 2;
      const y = e.clientY - rect.top - rect.height / 2;

      const moveX = x * 0.1;
      const moveY = y * 0.1;

      element.style.transform = `translateX(${moveX}px) translateY(${moveY}px) translateZ(0)`;
    });

    element.addEventListener('mouseleave', () => {
      element.style.transform = '';
    });
  }

  // ===== RIPPLE –≠–§–§–ï–ö–¢ =====
  addRippleEffect(element) {
    element.addEventListener('click', (e) => {
      const ripple = document.createElement('div');
      const rect = element.getBoundingClientRect();
      const size = Math.max(rect.width, rect.height);
      const x = e.clientX - rect.left - size / 2;
      const y = e.clientY - rect.top - size / 2;

      ripple.style.cssText = `
        position: absolute;
        border-radius: 50%;
        background: rgba(0, 212, 255, 0.6);
        transform: scale(0);
        animation: ripple 0.6s linear;
        left: ${x}px;
        top: ${y}px;
        width: ${size}px;
        height: ${size}px;
        pointer-events: none;
      `;

      element.style.position = 'relative';
      element.appendChild(ripple);

      setTimeout(() => ripple.remove(), 600);
    });
  }

  // ===== –í–´–ë–û–† –ê–î–ú–ò–ù–ê =====
  selectAdmin(adminId) {
    const admin = this.appData.admins.find(a => a.id === adminId);
    if (!admin) {
      console.error('–ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω:', adminId);
      return;
    }

    this.selectedAdmin = admin;
    this.showConfirmModal();
  }

  // ===== –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û =====
  showConfirmModal() {
    if (!this.selectedAdmin) return;

    const modal = document.getElementById('confirmModal');
    const modalAvatar = document.getElementById('modalAvatar');
    const modalTag = document.getElementById('modalTag');
    const modalRole = document.getElementById('modalRole');
    const modalRating = document.getElementById('modalRating');
    const modalSpec = document.getElementById('modalSpec');

    if (modal && modalAvatar && modalTag && modalRole && modalRating && modalSpec) {
      modalAvatar.src = this.selectedAdmin.avatar;
      modalTag.textContent = `@${this.selectedAdmin.tag}`;
      modalRole.textContent = this.selectedAdmin.role;
      modalRating.innerHTML = `${this.generateStars(this.selectedAdmin.rating)} ${this.selectedAdmin.rating}`;
      modalSpec.textContent = this.selectedAdmin.specialization;

      modal.classList.add('show');
      document.body.style.overflow = 'hidden';

      // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
      this.animateModal();
    }
  }

  closeModal() {
    const modal = document.getElementById('confirmModal');
    if (modal) {
      modal.classList.remove('show');
      document.body.style.overflow = '';
      this.selectedAdmin = null;
    }
  }

  animateModal() {
    const modalContent = document.querySelector('.modal-content');
    if (modalContent) {
      modalContent.style.animation = 'modalSlide 0.4s ease forwards';
    }
  }

  // ===== –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –í–´–ë–û–†–ê =====
  async confirmSelection() {
    if (!this.selectedAdmin) return;

    try {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º loading –Ω–∞ –∫–Ω–æ–ø–∫–µ
      const confirmBtn = document.getElementById('confirmBtn');
      if (confirmBtn) {
        const originalText = confirmBtn.innerHTML;
        confirmBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> –û—Ç–ø—Ä–∞–≤–∫–∞...';
        confirmBtn.disabled = true;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Telegram WebApp
      const result = await this.sendToTelegram({
        action: 'select_admin',
        admin_tag: this.selectedAdmin.tag,
        admin_data: this.selectedAdmin
      });

      if (result) {
        this.showSuccess('–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
        this.closeModal();

        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π feedback
        this.addSelectionEffect();

      } else {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å');
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
      this.showError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞');

      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
      const confirmBtn = document.getElementById('confirmBtn');
      if (confirmBtn) {
        confirmBtn.innerHTML = '<i class="fas fa-paper-plane"></i> –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å';
        confirmBtn.disabled = false;
      }
    }
  }

  // ===== –û–¢–ü–†–ê–í–ö–ê –í TELEGRAM =====
  async sendToTelegram(data) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram WebApp API
      if (window.Telegram && window.Telegram.WebApp) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Telegram WebApp API
        window.Telegram.WebApp.sendData(JSON.stringify(data));
        return true;
      } else {
        console.warn('Telegram WebApp API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');

        // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –±—ã
        console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', data);

        // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
        await new Promise(resolve => setTimeout(resolve, 1000));
        return true;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
      return false;
    }
  }

  // ===== –≠–§–§–ï–ö–¢ –í–´–ë–û–†–ê =====
  addSelectionEffect() {
    const selectedCard = document.querySelector(`[data-admin-id="${this.selectedAdmin.id}"]`);
    if (selectedCard) {
      selectedCard.style.animation = 'pulse 0.6s ease';
      selectedCard.style.borderColor = '#00ff88';
      selectedCard.style.boxShadow = '0 0 30px rgba(0, 255, 136, 0.6)';

      setTimeout(() => {
        selectedCard.style.animation = '';
        selectedCard.style.borderColor = '';
        selectedCard.style.boxShadow = '';
      }, 2000);
    }
  }

  // ===== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø =====
  showSuccess(message) {
    this.showToast(message, 'success');
  }

  showError(message) {
    this.showToast(message, 'error');
  }

  showToast(message, type) {
    const toastId = type === 'success' ? 'successToast' : 'errorToast';
    const toast = document.getElementById(toastId);

    if (toast) {
      const span = toast.querySelector('span');
      if (span) span.textContent = message;

      toast.classList.add('show');

      setTimeout(() => {
        toast.classList.remove('show');
      }, 3000);
    }
  }

  // ===== –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–ß–ï–¢–ß–ò–ö–û–í =====
  updateBadges() {
    const availableBadge = document.getElementById('availableBadge');
    const unavailableBadge = document.getElementById('unavailableBadge');

    if (availableBadge) {
      availableBadge.textContent = this.appData.admins.length;
    }

    if (unavailableBadge) {
      unavailableBadge.textContent = this.appData.unavailable_admins?.length || 0;
    }
  }

  // ===== –û–ë–†–ê–ë–û–¢–ö–ê –ö–õ–ê–í–ò–® =====
  handleKeyPress(e) {
    switch(e.key) {
      case 'Escape':
        if (document.getElementById('confirmModal').classList.contains('show')) {
          this.closeModal();
        }
        break;
      case 'Enter':
        if (document.getElementById('confirmModal').classList.contains('show')) {
          this.confirmSelection();
        }
        break;
      case '1':
        if (!e.target.matches('input')) {
          this.switchTab('available');
        }
        break;
      case '2':
        if (!e.target.matches('input')) {
          this.switchTab('unavailable');
        }
        break;
    }
  }

  // ===== PARALLAX –≠–§–§–ï–ö–¢–´ =====
  setupParallax() {
    window.addEventListener('scroll', () => {
      const scrolled = window.pageYOffset;
      const rate = scrolled * -0.5;

      document.querySelectorAll('.particle').forEach((particle, index) => {
        const speed = 1 + (index % 3) * 0.5;
        particle.style.transform = `translateY(${rate * speed}px)`;
      });
    });
  }

  // ===== –ú–ê–ì–ù–ï–¢–ò–ß–ï–°–ö–ò–ï –≠–§–§–ï–ö–¢–´ =====
  setupMagneticEffects() {
    document.addEventListener('mousemove', (e) => {
      const cards = document.querySelectorAll('.admin-card:hover');

      cards.forEach(card => {
        const rect = card.getBoundingClientRect();
        const x = e.clientX - rect.left - rect.width / 2;
        const y = e.clientY - rect.top - rect.height / 2;

        const moveX = x * 0.05;
        const moveY = y * 0.05;

        card.style.transform = `translateX(${moveX}px) translateY(${moveY}px) rotateY(${x * 0.05}deg) rotateX(${-y * 0.05}deg)`;
      });
    });
  }

  // ===== –ê–ù–ò–ú–ê–¶–ò–ò =====
  startAnimations() {
    // –ê–Ω–∏–º–∞—Ü–∏—è —á–∞—Å—Ç–∏—Ü
    this.animateParticles();

    // –ê–Ω–∏–º–∞—Ü–∏—è –≤–æ–ª–Ω
    this.animateWaves();

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –∞–Ω–∏–º–∞—Ü–∏–∏
    this.animationLoop();
  }

  animateParticles() {
    const particles = document.querySelectorAll('.particle');

    particles.forEach((particle, index) => {
      const delay = Math.random() * 2000;
      const duration = 15000 + Math.random() * 10000;

      particle.style.animationDelay = `${delay}ms`;
      particle.style.animationDuration = `${duration}ms`;
    });
  }

  animateWaves() {
    const waves = document.querySelectorAll('.wave');

    waves.forEach((wave, index) => {
      wave.style.animationDelay = `${index * 1000}ms`;
    });
  }

  animationLoop() {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–π –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä
    requestAnimationFrame(() => {
      this.updateAnimations();
      this.animationLoop();
    });
  }

  updateAnimations() {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ –∞–Ω–∏–º–∞—Ü–∏–π
    const time = Date.now() * 0.001;

    // –ü—É–ª—å—Å–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    document.querySelectorAll('.status-indicator').forEach(indicator => {
      const scale = 1 + Math.sin(time * 2) * 0.1;
      indicator.style.transform = `scale(${scale})`;
    });

    // –ú–µ—Ä—Ü–∞–Ω–∏–µ –∑–≤–µ–∑–¥
    document.querySelectorAll('.star').forEach((star, index) => {
      const opacity = 0.7 + Math.sin(time * 3 + index) * 0.3;
      star.style.opacity = opacity;
    });
  }
}

// ===== CSS –î–õ–Ø –ê–ù–ò–ú–ê–¶–ò–ô (–¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏) =====
function addDynamicStyles() {
  const style = document.createElement('style');
  style.textContent = `
    @keyframes ripple {
      to {
        transform: scale(4);
        opacity: 0;
      }
    }

    .no-results {
      grid-column: 1 / -1;
      text-align: center;
      padding: 60px 20px;
      background: rgba(255, 255, 255, 0.05);
      border-radius: 16px;
      border: 2px dashed rgba(255, 255, 255, 0.2);
    }

    .no-results-icon {
      font-size: 4rem;
      color: #8b5cf6;
      margin-bottom: 20px;
      animation: bounce 2s infinite;
    }

    .no-results h3 {
      font-size: 1.5rem;
      margin-bottom: 10px;
      color: white;
    }

    .no-results p {
      color: rgba(255, 255, 255, 0.7);
    }

    @keyframes bounce {
      0%, 100% { transform: translateY(0); }
      50% { transform: translateY(-10px); }
    }
  `;
  document.head.appendChild(style);
}

// ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø =====
document.addEventListener('DOMContentLoaded', () => {
  // –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Å—Ç–∏–ª–∏
  addDynamicStyles();

  // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  window.adminPanel = new FuturisticAdminPanel();

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram WebApp API
  if (window.Telegram && window.Telegram.WebApp) {
    window.Telegram.WebApp.ready();
    window.Telegram.WebApp.expand();

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
    window.Telegram.WebApp.MainButton.setText('–í—ã–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∞');
    window.Telegram.WebApp.MainButton.show();

    console.log('üì± Telegram WebApp API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  console.log('‚ú® –§—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–¥–º–∏–Ω —Å–µ–ª–µ–∫—Ç–æ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω!');
});

// ===== –û–¢–õ–ê–î–ö–ê =====
if (typeof window !== 'undefined') {
  window.debugAdminPanel = () => {
    console.log('üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:');
    console.log('–¢–µ–∫—É—â–∞—è –≤–∫–ª–∞–¥–∫–∞:', window.adminPanel?.currentTab);
    console.log('–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:', window.adminPanel?.searchTerm);
    console.log('–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω—ã:', window.adminPanel?.filteredAdmins);
    console.log('–í—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥–º–∏–Ω:', window.adminPanel?.selectedAdmin);
  };
}